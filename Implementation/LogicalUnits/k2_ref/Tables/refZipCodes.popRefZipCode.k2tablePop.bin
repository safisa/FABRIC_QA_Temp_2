<Graph name="refZipCodes.popRefZipCode.k2tablePop.bin" lastPartID="291">
  <TableNode partID="0" name="refZipCodes" pos="533 7" width="309.3241" />
  <FunctionMapNode id="0" L0="2" L1="3" L2="4" L3="5" L4="6" L5="7" L6="8" L7="9" R0="10" partID="45" topLabel="k2_FolderParser (45)" pos="10.4743271 52.00001" size="152.133118 121.674454" isRoot="true">
    <KFunction>{"Name":"k2_FolderParser","ID":"f_45","Category":"Parser","FunctionLevel":0,"FunctionType":0,"RegisterAsLuDbFunction":false,"SaveToDLUR":false,"ApiFunction":false,"DecisionFunction":false,"RequiresLuReference":false,"Desc":"A template function to be used as a root function for parser map.\nThe function scans a folder for delimited files based on a file name pattern, parses the files and generates a stream of records.\n","Auther":{"Name":"","ID":""},"Language":1,"FunctionBody":"// Check if function is running in debug mode\nboolean inDebug = inDebugMode();\n// If yes, look at the \"Debug\" folder\nif (inDebug){\n\tfolderPath = folderPathDebug;\n}\n\n// If no header or footer skip values provided, set them to 0\nif(skipHeaderRows == null || skipHeaderRows &lt; 0) skipHeaderRows = 0;\nif(skipFooterRows == null || skipFooterRows &lt; 0) skipFooterRows = 0;\n\n// Look at the location/folder and search for the file\n// based on the file regex name\nFolderReader reader = new FolderReader(folderPath, regexFilter);\nInputStreamReader stream = null;\n\n// Ready the next file\nwhile ((stream = reader.getNextStream()) != null) {\t\n\t// Prepare an array to hold the next X rows to allow to handle the \"skip footer\" functionality\n\t// The Algorithem will create an array in a footer skip size and use it to hold\n\t// the last X rows, at each point, the function will return the (row number - X) row.\n\t\n\t// Define the size of the array\n\tint footerArraySize = skipFooterRows + 1;\n\n\t// Define the array\n\t@SuppressWarnings(\"unchecked\") \n\tMap&lt;String, Object&gt;[] mapArray = new HashMap[footerArraySize];\n\t\n\t// Parser the file\n\tcom.k2view.cdbms.shared.StreamParser parser = com.k2view.cdbms.shared.StreamParser.getInstance(stream, enclosingChar.charAt(0), fieldDelimiter.charAt(0), recordDelimiter);\n\t\n\t// Set a counter to indicate the row number we're working at.\n\tint rowCounter = 0;\n\tdo{\n\t\t// Get the next row from the file\n\t\tMap&lt;String, Object&gt; map = parser.lineFramer(null);\n\t\t\n\t\t// Check if you reached EOF\n\t\tif(map == null) { break; } else {; }\n\t\t\n\t\t// Increase the row number count\n\t\trowCounter++;\n\t\t\n\t\t// Check if to skip row becuase of the header skip parameter\n\t\tif(rowCounter &lt;= skipHeaderRows) continue;\n\t\t\n\t\tint insertArray = (rowCounter - skipHeaderRows - 1)%(footerArraySize);\n\t\t\n\t\t// Insert row into array\n\t\tmapArray[insertArray] = map;\n\t\t\n\t\t// if row count is smaller than footer skip continue until you have\n\t\t// enough values to make sure the current line should not be skipped.\n\t\tif(rowCounter &lt;= skipFooterRows + skipHeaderRows) continue;\n\t\t\n\t\t// Calcuate which row should be returned from the array\n\t\tint extractValue = (insertArray+1)%footerArraySize;\n\t\t\n\t\t// Return the row\n\t\tObject[] row = {mapArray[extractValue]};\n\t\t\n\t\tyield(row);\n\t\t\n\t} while (true);\n\t\n\t// Drop stream only in running mode\n\tif(!inDebug) { // Running mode\n\t\treader.dropStream(stream);\n\t}\n}","IsSyntaxValid":true,"IsRootFunction":true,"inputParams":[{"Name":"folderPath","ID":"fi_45.0","Index":0,"DataType":"String","Comment":"the folder to scan for files","MapDefaultValue":"/usr/local/k2view/k2files"},{"Name":"folderPathDebug","ID":"fi_45.1","Index":1,"DataType":"String","Comment":"the folder to scan for files in debug mode","MapDefaultValue":"C:\\K2View"},{"Name":"regexFilter","ID":"fi_45.2","Index":2,"DataType":"String","Comment":"a Java regualr expression of file names to be parsed","MapDefaultValue":"zip_code_database.csv"},{"Name":"recordDelimiter","ID":"fi_45.3","Index":3,"DataType":"String","Comment":"a character to be used as a separator between records","MapDefaultValue":"\\n"},{"Name":"fieldDelimiter","ID":"fi_45.4","Index":4,"DataType":"String","Comment":"a character to be used as a separator between fields","MapDefaultValue":","},{"Name":"enclosingChar","ID":"fi_45.5","Index":5,"DataType":"String","Comment":"a character to be used to enclose fields","MapDefaultValue":"\""},{"Name":"skipHeaderRows","ID":"fi_45.6","Index":6,"DataType":"Integer","Comment":"","MapDefaultValue":"1"},{"Name":"skipFooterRows","ID":"fi_45.7","Index":7,"DataType":"Integer","Comment":"","MapDefaultValue":"0"}],"outputParams":[{"Name":"result","ID":"fo_45.0","Index":0,"DataType":"Map&lt;String,Object&gt;","Comment":""}]}</KFunction>
  </FunctionMapNode>
  <FunctionMapNode id="1" L0="11" R0="12" R1="13" R2="14" R3="15" R4="16" R5="17" R6="18" R7="19" R8="20" R9="21" R10="22" R11="23" R12="24" R13="25" R14="26" R15="27" partID="67" topLabel="fnExtractZipInfo (67)" pos="281.0358 25.9999847" size="164.783478 218.257828" isRoot="false">
    <KFunction>{"Name":"fnExtractZipInfo","ID":"f_67","Category":"DataMaskingLibrary","FunctionLevel":0,"FunctionType":0,"RegisterAsLuDbFunction":false,"SaveToDLUR":false,"ApiFunction":false,"DecisionFunction":false,"RequiresLuReference":false,"Desc":"","Auther":{"Name":"","ID":""},"Language":1,"FunctionBody":"// Returns the structure of the ZIP file's row\nreturn new Object [] {\n\tiMap.get(\"0\"),\n\tiMap.get(\"1\"),\n\tiMap.get(\"2\"),\n\tiMap.get(\"3\"),\n\tiMap.get(\"4\"),\n\tiMap.get(\"5\"),\n\tiMap.get(\"6\"),\n\tiMap.get(\"7\"),\n\tiMap.get(\"8\"),\n\tiMap.get(\"9\"),\n\tiMap.get(\"10\"),\n\tiMap.get(\"11\"),\n\tiMap.get(\"12\"),\n\tiMap.get(\"13\"),\n\tiMap.get(\"14\"),\n\tiMap.get(\"15\")};","IsSyntaxValid":true,"IsRootFunction":false,"inputParams":[{"Name":"iMap","ID":"fi_67.0","Index":0,"DataType":"Map&lt;String,Object&gt;","Comment":""}],"outputParams":[{"Name":"zip","ID":"fo_67.0","Index":0,"DataType":"String","Comment":""},{"Name":"type","ID":"fo_67.1","Index":1,"DataType":"String","Comment":""},{"Name":"primary_city","ID":"fo_67.2","Index":2,"DataType":"String","Comment":""},{"Name":"acceptable_cities","ID":"fo_67.3","Index":3,"DataType":"String","Comment":""},{"Name":"unacceptable_cities","ID":"fo_67.4","Index":4,"DataType":"String","Comment":""},{"Name":"state","ID":"fo_67.5","Index":5,"DataType":"String","Comment":""},{"Name":"county","ID":"fo_67.6","Index":6,"DataType":"String","Comment":""},{"Name":"timezone","ID":"fo_67.7","Index":7,"DataType":"String","Comment":""},{"Name":"area_codes","ID":"fo_67.8","Index":8,"DataType":"String","Comment":""},{"Name":"latitude","ID":"fo_67.9","Index":9,"DataType":"String","Comment":""},{"Name":"longitude","ID":"fo_67.10","Index":10,"DataType":"String","Comment":""},{"Name":"world_region","ID":"fo_67.11","Index":11,"DataType":"String","Comment":""},{"Name":"country","ID":"fo_67.12","Index":12,"DataType":"String","Comment":""},{"Name":"decommissioned","ID":"fo_67.13","Index":13,"DataType":"String","Comment":""},{"Name":"estimated_population","ID":"fo_67.14","Index":14,"DataType":"String","Comment":""},{"Name":"notes","ID":"fo_67.15","Index":15,"DataType":"String","Comment":""}]}</KFunction>
  </FunctionMapNode>
  <Link partID="12" from="10" to="11" pointsArr="136.923218 115.38282 146.923218 115.38282 271.0358 137.674469 281.0358 137.674469" fromNodePartID="45" fromNodeColumnName="result" toNodePartID="67" toNodeColumnName="iMap" />
  <Link partID="100" from="12" to="28" pointsArr="445.819275 47.127594 455.819275 47.127594 523 38.0364571 533 38.0364571" fromNodePartID="67" fromNodeColumnName="zip" toNodePartID="0" toNodeColumnName="ZIP" />
  <Link partID="101" from="13" to="29" pointsArr="445.819275 59.20051 455.819275 59.20051 523 50.109375 533 50.109375" fromNodePartID="67" fromNodeColumnName="type" toNodePartID="0" toNodeColumnName="type" />
  <Link partID="102" from="14" to="30" pointsArr="445.819275 71.27342 455.819275 71.27342 523 62.18229 533 62.18229" fromNodePartID="67" fromNodeColumnName="primary_city" toNodePartID="0" toNodeColumnName="primary_city" />
  <Link partID="103" from="15" to="31" pointsArr="445.819275 83.346344 455.819275 83.346344 523 74.2552 533 74.2552" fromNodePartID="67" fromNodeColumnName="acceptable_cities" toNodePartID="0" toNodeColumnName="acceptable_cities" />
  <Link partID="104" from="16" to="32" pointsArr="445.819275 95.41925 455.819275 95.41925 523 86.32812 533 86.32812" fromNodePartID="67" fromNodeColumnName="unacceptable_cities" toNodePartID="0" toNodeColumnName="unacceptable_cities" />
  <Link partID="105" from="17" to="33" pointsArr="445.819275 107.492172 455.819275 107.492172 523 98.40103 533 98.40103" fromNodePartID="67" fromNodeColumnName="state" toNodePartID="0" toNodeColumnName="state" />
  <Link partID="106" from="18" to="34" pointsArr="445.819275 119.565094 455.819275 119.565094 523 110.473953 533 110.473953" fromNodePartID="67" fromNodeColumnName="county" toNodePartID="0" toNodeColumnName="county" />
  <Link partID="107" from="19" to="35" pointsArr="445.819275 131.638016 455.819275 131.638016 523 122.546875 533 122.546875" fromNodePartID="67" fromNodeColumnName="timezone" toNodePartID="0" toNodeColumnName="timezone" />
  <Link partID="108" from="20" to="36" pointsArr="445.819275 143.710938 455.819275 143.710938 523 134.6198 533 134.6198" fromNodePartID="67" fromNodeColumnName="area_codes" toNodePartID="0" toNodeColumnName="area_codes" />
  <Link partID="109" from="21" to="37" pointsArr="445.819275 155.783859 455.819275 155.783859 523 146.692719 533 146.692719" fromNodePartID="67" fromNodeColumnName="latitude" toNodePartID="0" toNodeColumnName="latitude" />
  <Link partID="110" from="22" to="38" pointsArr="445.819275 167.856781 455.819275 167.856781 523 158.76564 533 158.76564" fromNodePartID="67" fromNodeColumnName="longitude" toNodePartID="0" toNodeColumnName="longitude" />
  <Link partID="111" from="23" to="39" pointsArr="445.819275 179.929688 455.819275 179.929688 523 170.838547 533 170.838547" fromNodePartID="67" fromNodeColumnName="world_region" toNodePartID="0" toNodeColumnName="world_region" />
  <Link partID="112" from="24" to="40" pointsArr="445.819275 192.0026 455.819275 192.0026 523 182.911453 533 182.911453" fromNodePartID="67" fromNodeColumnName="country" toNodePartID="0" toNodeColumnName="country" />
  <Link partID="113" from="25" to="41" pointsArr="445.819275 204.0755 455.819275 204.0755 523 194.98436 533 194.98436" fromNodePartID="67" fromNodeColumnName="decommissioned" toNodePartID="0" toNodeColumnName="decommissioned" />
  <Link partID="114" from="26" to="42" pointsArr="445.819275 216.1484 455.819275 216.1484 523 207.057266 533 207.057266" fromNodePartID="67" fromNodeColumnName="estimated_population" toNodePartID="0" toNodeColumnName="estimated_population" />
  <Link partID="115" from="27" to="43" pointsArr="445.819275 228.221313 455.819275 228.221313 523 219.130173 533 219.130173" fromNodePartID="67" fromNodeColumnName="notes" toNodePartID="0" toNodeColumnName="notes" />
</Graph>